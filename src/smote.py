# -*- coding: utf-8 -*-
"""model_smote.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ninlgsAoc9jBn2J3OUjmTw3dxYEXKYvr
"""
import os
from google.colab import drive
import numpy as np
import json
import PIL
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
from torchvision import transforms, utils
from skimage import io, transform
import matplotlib.pyplot as plt
import time
import copy
import random
import pandas as pd
from torch.utils.data import Dataset, DataLoader
from efficientnet_pytorch import EfficientNet
from imblearn.over_sampling import SMOTE
import pickle
from torch.optim.lr_scheduler import StepLR
import gc
from sklearn import metrics
from sklearn.metrics import roc_auc_score

device = 'cuda' if torch.cuda.is_available() else 'cpu'

landmarks_frame=pd.read_csv('/content/drive/My Drive/2020Fall/인공개 팀플/jpeg-melanoma-256x256/csv/train_no_unknown.csv')
diagnose_dict = {"melanoma": 0, "nevus": 1}

sex = np.array(landmarks_frame.iloc[:, 2])
sex=np.where(sex=="male", 0, 1)
sex_o = np.zeros((sex.size, sex.max()+1))
sex_o[np.arange(sex.size),sex] = 1
sex_o=torch.from_numpy(sex_o.astype(np.float32))

age = np.array(landmarks_frame.iloc[:, 3])/10
age=age.astype(np.int64)
age_o = np.zeros((age.size, age.max()+1))
age_o[np.arange(age.size),age] = 1
age_o=torch.from_numpy(age_o.astype(np.float32))

site_dict={"head/neck":0,"upper extremity":1,"lower extremity":2,"torso":3,"palms/soles":4,"oral/genital":5}
site = np.array(landmarks_frame.iloc[:, 4])
for i in site_dict.keys():
    site=np.where(site==i,site_dict[i],site)
site=site.astype(np.int64)
site_o = np.zeros((site.size, site.max()+1))
site_o[np.arange(site.size),site] = 1
site_o=torch.from_numpy(site_o.astype(np.float32))

metadata=torch.cat((sex_o,age_o,site_o),1)

answers=np.array(landmarks_frame.iloc[:, 5])
answers=np.where(answers=="melanoma", 0, 1)
answers=torch.from_numpy(answers)

images=[]
ids=landmarks_frame.iloc[:, 0]
for i in range(metadata.size(0)): 
    st=time.time()
    img_name = os.path.join('/content/drive/My Drive/2020Fall/인공개 팀플/jpeg-melanoma-256x256/train',ids[i])
    image = io.imread(img_name+".jpg")
    image = transforms.ToTensor()(image)
    image=image.view(-1)
    im=torch.cat((image.unsqueeze(0),metadata[i:i+1]),1)
    images.append(im)

images=torch.cat(images,0)

#############################################
# applying SMOTE.
#############################################
gc.collect()
sm=SMOTE(random_state=0)
gc.collect()
alldata_up,answers_up=sm.fit_sample(images,answers)
gc.collect()
d_up,a_up=torch.from_numpy(alldata_up),torch.from_numpy(answers_up)
imgs=d_up[:,:-18].view(d_up.size(0),3,256,256)
metadatas=d_up[:,-18:]
print('done')